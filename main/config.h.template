#ifndef CONFIG_H
#define CONFIG_H

// =============================================================================
// WiFi Configuration
// =============================================================================

// Primary WiFi Configuration (ESP-LR Access Point)
// ESP-LR (Long Range) mode trades speed for distance - ideal for IoT devices
#define WIFI_LR_ENABLED true                     // Set to false to skip LR attempts
#define WIFI_LR_SSID "YOUR_LR_AP_SSID"          // Your ESP-LR access point name
#define WIFI_LR_PASSWORD "YOUR_LR_PASSWORD"      // Your ESP-LR password
#define WIFI_LR_CONNECT_TIMEOUT_SEC 15          // Seconds to wait for LR connection

// Fallback WiFi Configuration (Normal 802.11 b/g/n)
#define WIFI_SSID "YOUR_WIFI_SSID"              // Your regular WiFi network name
#define WIFI_PASSWORD "YOUR_WIFI_PASSWORD"       // Your regular WiFi password
#define WIFI_CONNECT_TIMEOUT_SEC 10             // Seconds to wait for normal connection

// WiFi Reconnection Settings (DEPRECATED - Device now sleeps immediately on disconnect)
// #define WIFI_RECONNECT_ATTEMPTS 2             // No longer used
// #define WIFI_DISCONNECT_GRACE_SEC 5           // No longer used

// =============================================================================
// Failsafe Reboot Timer (CRITICAL FOR POWER MANAGEMENT)
// =============================================================================

// Maximum time device stays awake after successful WiFi connection
// After this time, device WILL reboot and return to sleep/wake cycle
// This ensures device cannot get "stuck" awake and drain battery

#define ENABLE_FAILSAFE_REBOOT true             // Master enable for failsafe
#define MAX_UPTIME_AFTER_WIFI_SEC 120           // 2 minutes for testing
                                                 // Use 1800 (30 min) for production

// Failsafe Operation:
// 1. Timer starts when WiFi connects successfully
// 2. Timer runs at HIGHEST priority - cannot be blocked
// 3. At timeout, device logs warning and forces clean reboot
// 4. After reboot, normal sleep/wake cycle resumes

// =============================================================================
// WiFi Resilience Settings
// =============================================================================

// Connection stability parameters
#define WIFI_BEACON_TIMEOUT_ENABLE true         // Enable extended beacon timeout
#define WIFI_BEACON_TIMEOUT 30                  // Seconds before considering AP lost
#define WIFI_SCAN_RSSI_THRESHOLD -85            // Minimum RSSI to attempt connection (dBm)

// Power management trade-offs
#define WIFI_PS_MODE WIFI_PS_NONE               // NONE=stable, MIN_MODEM=power save
#define WIFI_ENABLE_11B_RATE true               // Use 802.11b rates for better range

// Mode-specific notes:
// ESP-LR: Fixed 250 Kbps, max power, power save must be NONE, 2-4x range
// Normal: Variable rates, configurable power, can use power save, standard range

// =============================================================================
// Hardware Configuration
// =============================================================================

// SWD Programming Interface (ESP32-C3 GPIO pins)
#define SWD_PIN_SWCLK 4                          // Serial Wire Clock
#define SWD_PIN_SWDIO 3                          // Serial Wire Data I/O
#define SWD_PIN_RESET 5                          // Target reset control

// Power Control
#define TARGET_POWER_GPIO 10    // Controls MOSFET for nRF52 power
                                // SEEED XIAO ESP32-C3 supports gpio_hold for all pins during deep sleep
                                // (not limited to RTC GPIOs like original ESP32)

// =============================================================================
// Battery Management & Protection Strategy
// =============================================================================
// Multi-layer protection approach:
//
// Layer 1 (Application - 3.6V): Turn off nRF52 radio to conserve power
//   - Threshold: NRF52_POWER_OFF_VOLTAGE (default 3.6V)
//   - Action: Disable nRF52, continue WiFi operation
//
// Layer 2 (Application - 3.4V): Critical battery protection
//   - Threshold: BATTERY_CRITICAL_THRESHOLD (default 3.4V)
//   - Action: Skip WiFi scan, immediate 12-hour deep sleep
//
// Layer 3 (Hardware BMS - 3.0V): Hardware power cutoff
//   - Battery Management System cuts power completely
//   - Prevents deep discharge and battery damage
//   - Acts as fail-safe if software protection fails
//
// ESP32 Bootloader Brownout (~2.4V): DISABLED
//   - Redundant with BMS protection at 3.0V
//   - Causes boot loops when battery voltage marginal
//   - Disabled in sdkconfig.defaults
//
// =============================================================================

// Battery Voltage Thresholds (LiPo/Li-ion typical values)
#define BATTERY_HIGH_THRESHOLD 4.1f             // Voltage for "high" battery state
#define BATTERY_MEDIUM_HIGH_THRESHOLD 3.8f      // Voltage for "medium-high" state
#define BATTERY_LOW_THRESHOLD 3.6f              // Voltage for "low" state
#define BATTERY_CRITICAL_THRESHOLD 3.4f         // Voltage for "critical" state (emergency sleep)

// =============================================================================
// Deep Sleep Configuration
// =============================================================================

// Sleep Duration Based on Battery Level
// Production values - adjust shorter for testing
#define DEEP_SLEEP_HIGH_BATTERY_SEC 600         // 10 minutes when battery > 4.1V
#define DEEP_SLEEP_MEDIUM_BATTERY_SEC 1200      // 20 minutes when 3.8-4.1V
#define DEEP_SLEEP_LOW_BATTERY_SEC 1800         // 30 minutes when 3.6-3.8V  
#define DEEP_SLEEP_CRITICAL_SEC 43200           // 12 hours when < 3.4V

// Testing values (uncomment for development)
// #define DEEP_SLEEP_HIGH_BATTERY_SEC 10       // 10 seconds for testing
// #define DEEP_SLEEP_MEDIUM_BATTERY_SEC 20     // 20 seconds for testing
// #define DEEP_SLEEP_LOW_BATTERY_SEC 30        // 30 seconds for testing
// #define DEEP_SLEEP_CRITICAL_SEC 60           // 1 minute for testing

// =============================================================================
// 24-Hour Absolute Reboot Timer
// =============================================================================

// Maximum accumulated uptime before forced reboot (seconds)
// This timer survives deep sleep and tracks total awake time
// After this time, device will force reboot to reset all state

#define ABSOLUTE_REBOOT_INTERVAL_SEC (24 * 60 * 60)  // 24 hours (production)
// #define ABSOLUTE_REBOOT_INTERVAL_SEC 300           // 5 minutes (testing)

// When to enable the absolute timer
#define ENABLE_ABSOLUTE_REBOOT_TIMER true            // Master enable switch

// Note: This is different from the failsafe timer
// - Absolute timer: Total accumulated uptime across sleep/wake cycles
// - Failsafe timer: Time awake after WiFi connects

// =============================================================================
// Brownout Recovery Protection
// =============================================================================

// Brownout loop detection and recovery settings
// If device brownouts during boot (before battery check can run),
// it will enter extended deep sleep to allow battery recovery

#define BROWNOUT_LOOP_THRESHOLD 3           // Trigger after 3 consecutive brownouts
#define BROWNOUT_RECOVERY_SLEEP_SEC 86400   // 24 hours (full solar day/night cycle)

// For testing, use shorter interval:
// #define BROWNOUT_RECOVERY_SLEEP_SEC 300  // 5 minutes

// Time window to consider brownouts as "consecutive"
#define BROWNOUT_RESET_WINDOW_SEC 600       // 10 minutes

// =============================================================================
// nRF52 Radio Power Management
// =============================================================================

// Automatic power-off when battery is low
#define NRF52_POWER_OFF_VOLTAGE 3.6f            // Turn off nRF52 below this voltage

// Hysteresis for turn-on (prevents rapid on/off cycling)
#define NRF52_POWER_ON_HYSTERESIS 0.1f          // Battery must be this much ABOVE threshold to turn back on
                                                 // Example: 3.6V + 0.1V = 3.7V to turn on
                                                 // Smaller = faster recovery, Larger = more stable

// Minimum off time before allowing turn-on (prevents rapid cycling)
#define NRF52_MIN_OFF_TIME_SEC 300              // 5 minutes minimum (prevents bounce)
                                                 // Battery must be good for at least this long

// Maximum off time - after this, try turning on even if battery marginal
#define NRF52_MAX_OFF_TIME_SEC 43200            // 12 hours maximum (full solar day/night cycle)
                                                 // After this time, give up waiting and try turning on

// Testing values (uncomment for quick iteration):
// #define NRF52_POWER_ON_HYSTERESIS 0.05f      // Small hysteresis for testing
// #define NRF52_MIN_OFF_TIME_SEC 60            // 1 minute for quick tests
// #define NRF52_MAX_OFF_TIME_SEC 600           // 10 minutes for testing

// Note: NRF52_POWER_OFF_SEC is DEPRECATED - use the values above instead
// The old NRF52_POWER_OFF_SEC (12 hour fixed timeout) is replaced by:
// - NRF52_MIN_OFF_TIME_SEC: minimum time before considering turn-on
// - NRF52_MAX_OFF_TIME_SEC: maximum time to wait before forcing turn-on attempt

// =============================================================================
// Feature Flags
// =============================================================================

#define ENABLE_DEEP_SLEEP_POWER_MGMT true       // Master switch for sleep functionality
#define ENABLE_BATTERY_PROTECTION true          // Enable low battery protection
#define LOG_BATTERY_STATS true                  // Log battery info to console

// =============================================================================
// Device Information
// =============================================================================

#define DEVICE_NAME "Mesh Radio Flasher"
#define DEVICE_VERSION "1.0.0"

#endif // CONFIG_H